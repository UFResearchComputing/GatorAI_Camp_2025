"""
NPC Creator Helper Script
========================
This script helps you quickly add new NPCs to PyDew Valley.

Usage:
    python npc_creator.py

Features:
- Interactive NPC creation wizard
- Generates all necessary code files
- Provides step-by-step integration instructions
- Creates placeholder sprites
"""

import os
import sys
from pathlib import Path

def main():
    print("🧙‍♂️ PyDew Valley NPC Creator")
    print("=" * 50)
    
    # Get NPC information from user
    npc_info = get_npc_info()
    
    if not npc_info:
        print("❌ NPC creation cancelled.")
        return
    
    # Create NPC files
    create_npc_files(npc_info)
    
    # Generate integration instructions
    create_integration_guide(npc_info)
    
    print("\n🎉 NPC creation complete!")
    print(f"📁 Files created in: npcs/{npc_info['name'].lower()}/")
    print(f"📖 See integration_guide_{npc_info['name'].lower()}.md for next steps")

def get_npc_info():
    """Get NPC information from the user"""
    print("\n📝 NPC Information")
    print("-" * 30)
    
    try:
        name = input("NPC name (e.g., 'Blacksmith Magnus'): ").strip()
        if not name:
            return None
        
        role = input("NPC role (e.g., 'tool craftsman'): ").strip()
        if not role:
            role = "helpful villager"
        
        interaction_type = get_interaction_type()
        if not interaction_type:
            return None
        
        position = get_position()
        if not position:
            return None
        
        dialogue = input("Default dialogue (optional): ").strip()
        if not dialogue:
            dialogue = f"Hello there! I'm {name}, nice to meet you!"
        
        return {
            "name": name,
            "role": role,
            "interaction_type": interaction_type,
            "position": position,
            "dialogue": dialogue,
            "class_name": name.replace(" ", "").replace("'", ""),
            "file_name": name.lower().replace(" ", "_").replace("'", "")
        }
        
    except KeyboardInterrupt:
        return None

def get_interaction_type():
    """Get the type of interaction for this NPC"""
    print("\n🎯 Interaction Type")
    print("1. Simple dialogue only")
    print("2. Custom menu/shop")
    print("3. Quest giver")
    print("4. Information provider")
    
    try:
        choice = input("Choose interaction type (1-4): ").strip()
        types = {
            "1": "dialogue",
            "2": "menu",
            "3": "quest",
            "4": "info"
        }
        return types.get(choice, "dialogue")
    except:
        return "dialogue"

def get_position():
    """Get NPC position on the map"""
    print("\n📍 NPC Position")
    print("Choose a position for your NPC:")
    print("1. Near the trader (400, 250)")
    print("2. Near the house (200, 200)")
    print("3. Center of map (500, 400)")
    print("4. Custom position")
    
    try:
        choice = input("Choose position (1-4): ").strip()
        positions = {
            "1": (400, 250),
            "2": (200, 200),
            "3": (500, 400)
        }
        
        if choice in positions:
            return positions[choice]
        elif choice == "4":
            x = int(input("X coordinate: "))
            y = int(input("Y coordinate: "))
            return (x, y)
        else:
            return (400, 300)  # Default position
    except:
        return (400, 300)

def create_npc_files(npc_info):
    """Create all necessary files for the NPC"""
    npc_dir = Path(f"npcs/{npc_info['file_name']}")
    npc_dir.mkdir(parents=True, exist_ok=True)
    
    # Create NPC character class
    create_npc_character_file(npc_info, npc_dir)
    
    # Create menu file if needed
    if npc_info["interaction_type"] == "menu":
        create_npc_menu_file(npc_info, npc_dir)
    
    # Create sprite placeholders
    create_sprite_placeholders(npc_info, npc_dir)
    
    # Create integration patches
    create_integration_patches(npc_info, npc_dir)

def create_npc_character_file(npc_info, npc_dir):
    """Create the NPC character class file"""
    content = f'''"""
{npc_info["name"]} NPC Character
Generated by NPC Creator
"""

import pygame
from sprites import Generic
from settings import LAYERS
import os

class {npc_info["class_name"]}(Generic):
    """
    {npc_info["name"]} - {npc_info["role"]}
    """
    
    def __init__(self, pos, groups):
        # Create placeholder sprite
        placeholder = pygame.Surface((32, 48))
        placeholder.fill((100, 150, 200))  # Light blue placeholder
        
        super().__init__(pos, placeholder, groups, LAYERS['main'])
        
        # NPC Properties
        self.name = "{npc_info["name"]}"
        self.role = "{npc_info["role"]}"
        self.dialogue = "{npc_info["dialogue"]}"
        
        # Visual properties
        self.frame_index = 0
        self.hitbox = self.rect.copy().inflate(-20, -10)
        
        # Customize appearance (change colors here)
        self.image.fill((150, 100, 200))  # Purple color - change as needed
    
    def update(self, dt):
        """Update the NPC (add animations here later)"""
        pass
    
    def get_dialogue(self):
        """Get the NPC's dialogue"""
        return self.dialogue
'''
    
    char_file = npc_dir / f"{npc_info['file_name']}_character.py"
    char_file.write_text(content)
    print(f"✅ Created character file: {char_file}")

def create_npc_menu_file(npc_info, npc_dir):
    """Create NPC menu file for shop/interaction NPCs"""
    content = f'''"""
{npc_info["name"]} Menu System
Generated by NPC Creator
"""

import pygame
from settings import *
from timer import Timer

class {npc_info["class_name"]}Menu:
    def __init__(self, player):
        self.player = player
        self.display_surface = pygame.display.get_surface()
        self.font = pygame.font.Font("font/LycheeSoda.ttf", 30)
        self.active = True
        
        # Menu options - customize these for your NPC
        self.options = [
            {{"name": "Option 1", "price": 50, "description": "First service"}},
            {{"name": "Option 2", "price": 100, "description": "Second service"}},
            {{"name": "Option 3", "price": 75, "description": "Third service"}}
        ]
        
        self.index = 0
        self.timer = Timer(200)
        
        # Menu appearance
        self.width = 500
        self.height = 400
        self.main_rect = pygame.Rect(
            SCREEN_WIDTH // 2 - self.width // 2,
            SCREEN_HEIGHT // 2 - self.height // 2,
            self.width,
            self.height
        )
    
    def input(self):
        keys = pygame.key.get_pressed()
        self.timer.update()
        
        if keys[pygame.K_ESCAPE]:
            self.active = False
            return
        
        if not self.timer.active:
            if keys[pygame.K_UP]:
                self.index = (self.index - 1) % len(self.options)
                self.timer.activate()
            
            if keys[pygame.K_DOWN]:
                self.index = (self.index + 1) % len(self.options)
                self.timer.activate()
            
            if keys[pygame.K_SPACE]:
                self.select_option()
                self.timer.activate()
    
    def select_option(self):
        """Handle option selection"""
        option = self.options[self.index]
        if self.player.money >= option["price"]:
            self.player.money -= option["price"]
            print(f"✅ {{option['description']}} completed!")
        else:
            print("💰 Not enough money!")
    
    def display(self):
        """Draw the menu"""
        # Background
        pygame.draw.rect(self.display_surface, (50, 50, 50), self.main_rect)
        pygame.draw.rect(self.display_surface, "white", self.main_rect, 3)
        
        # Title
        title_surf = self.font.render(f"{npc_info['name']} Services", True, "white")
        title_rect = title_surf.get_rect(centerx=self.main_rect.centerx, y=self.main_rect.y + 20)
        self.display_surface.blit(title_surf, title_rect)
        
        # Money
        money_surf = pygame.font.Font("font/LycheeSoda.ttf", 24).render(f"Money: ${{self.player.money}}", True, "yellow")
        money_rect = money_surf.get_rect(centerx=self.main_rect.centerx, y=title_rect.bottom + 20)
        self.display_surface.blit(money_surf, money_rect)
        
        # Options
        start_y = money_rect.bottom + 40
        for i, option in enumerate(self.options):
            y_pos = start_y + i * 60
            color = "yellow" if i == self.index else "white"
            
            text = f"{{option['name']}} - ${{option['price']}}"
            text_surf = pygame.font.Font("font/LycheeSoda.ttf", 20).render(text, True, color)
            text_rect = text_surf.get_rect(centerx=self.main_rect.centerx, y=y_pos)
            self.display_surface.blit(text_surf, text_rect)
            
            if i == self.index:
                pygame.draw.rect(self.display_surface, "yellow", text_rect.inflate(20, 5), 2)
        
        # Instructions
        inst_surf = pygame.font.Font("font/LycheeSoda.ttf", 16).render("SPACE: Select | ESC: Exit", True, "white")
        inst_rect = inst_surf.get_rect(centerx=self.main_rect.centerx, y=self.main_rect.bottom - 30)
        self.display_surface.blit(inst_surf, inst_rect)
    
    def update(self):
        self.input()
        if self.active:
            self.display()
        return self.active
'''
    
    menu_file = npc_dir / f"{npc_info['file_name']}_menu.py"
    menu_file.write_text(content)
    print(f"✅ Created menu file: {menu_file}")

def create_sprite_placeholders(npc_info, npc_dir):
    """Create placeholder sprite directory structure"""
    sprites_dir = npc_dir / "sprites"
    idle_dir = sprites_dir / "idle"
    idle_dir.mkdir(parents=True, exist_ok=True)
    
    # Create a README for sprite instructions
    sprite_readme = sprites_dir / "README.md"
    sprite_readme.write_text(f"""# {npc_info["name"]} Sprites

## Directory Structure
Place your NPC sprite files in the following structure:

```
sprites/
└── idle/
    ├── 0.png    (32x48 pixels)
    ├── 1.png    (32x48 pixels) 
    ├── 2.png    (32x48 pixels)
    └── 3.png    (32x48 pixels)
```

## Sprite Requirements
- **Size**: 32x48 pixels per frame
- **Format**: PNG with transparency
- **Frames**: 4 frames for idle animation
- **Style**: Match the game's pixel art aesthetic

## Creating Sprites
1. Use [Piskel](https://www.piskelapp.com/) for easy pixel art creation
2. Or edit existing character sprites as templates
3. Keep animations subtle for idle state
4. Test in-game frequently

If no custom sprites are provided, the NPC will use a colored placeholder rectangle.
""")
    print(f"✅ Created sprite directory: {sprites_dir}")

def create_integration_patches(npc_info, npc_dir):
    """Create code patches for integration"""
    
    # Level.py patches
    level_patch = f'''
# Add to level.py imports:
from npcs.{npc_info["file_name"]}.{npc_info["file_name"]}_character import {npc_info["class_name"]}
{"from npcs." + npc_info["file_name"] + "." + npc_info["file_name"] + "_menu import " + npc_info["class_name"] + "Menu" if npc_info["interaction_type"] == "menu" else ""}

# Add to Level.__init__ method:
{"self." + npc_info["file_name"] + "_menu = " + npc_info["class_name"] + "Menu(self.player)" if npc_info["interaction_type"] == "menu" else ""}
{"self." + npc_info["file_name"] + "_active = False" if npc_info["interaction_type"] == "menu" else ""}

# Add to Level.setup() method:
# {npc_info["name"]} NPC
{npc_info["file_name"]}_pos = {npc_info["position"]}
Interaction(
    {npc_info["file_name"]}_pos,
    (64, 64),
    self.interaction_sprites,
    "{npc_info["class_name"]}"
)

# Create visual NPC
self.{npc_info["file_name"]}_npc = {npc_info["class_name"]}(
    {npc_info["file_name"]}_pos,
    self.all_sprites
)

# Add method to Level class:
def toggle_{npc_info["file_name"]}(self):
    """Start {npc_info["name"]} interaction"""
    recent_emotions = list(self.emotions_deque) if self.emotions_deque else ["neutral"]
    current_emotion = recent_emotions[0] if recent_emotions else "neutral"
    
    player_context = {{
        "npc_name": "{npc_info["name"]}",
        "npc_role": "{npc_info["role"]}",
        "situation": "player wants to interact with {npc_info["name"]}",
        "emotion": current_emotion,
        "player_money": self.player.money,
    }}
    
    self.dialogue_system.start_dialogue(
        "{npc_info["file_name"]}",
        player_context=player_context,
        on_finish=self.open_{npc_info["file_name"]}_menu
    )

{"def open_" + npc_info["file_name"] + "_menu(self):" if npc_info["interaction_type"] == "menu" else ""}
{"    \"\"\"Open the " + npc_info["name"] + " Menu\"\"\"" if npc_info["interaction_type"] == "menu" else ""}
{"    self." + npc_info["file_name"] + "_active = True" if npc_info["interaction_type"] == "menu" else ""}
{"    self." + npc_info["file_name"] + "_menu = " + npc_info["class_name"] + "Menu(self.player)" if npc_info["interaction_type"] == "menu" else ""}

# Add to Level.run() method:
{"# Handle " + npc_info["name"] + " menu" if npc_info["interaction_type"] == "menu" else ""}
{"if self." + npc_info["file_name"] + "_active:" if npc_info["interaction_type"] == "menu" else ""}
{"    self." + npc_info["file_name"] + "_active = self." + npc_info["file_name"] + "_menu.update()" if npc_info["interaction_type"] == "menu" else ""}

# Update Player creation (find existing Player creation and add):
toggle_{npc_info["file_name"]}=self.toggle_{npc_info["file_name"]},
'''
    
    # Player.py patches
    player_patch = f'''
# Update Player.__init__ method signature:
def __init__(self, pos, group, collision_sprites, tree_sprites, interaction, soil_layer, toggle_shop, toggle_blacksmith=None, toggle_{npc_info["file_name"]}=None):
    # ... existing code ...
    self.toggle_{npc_info["file_name"]} = toggle_{npc_info["file_name"]}

# Update interaction handling (find existing interaction code and add):
elif collided_interaction_sprite[0].name == "{npc_info["class_name"]}":
    if self.toggle_{npc_info["file_name"]}:
        self.toggle_{npc_info["file_name"]}()
'''
    
    # Dialogue system patch
    dialogue_patch = f'''
# Add to dialogue_system.py _get_static_fallback method:
"{npc_info["file_name"]}": "{npc_info["dialogue"]}"
'''
    
    # Save patches
    patches_dir = npc_dir / "integration_patches"
    patches_dir.mkdir(exist_ok=True)
    
    (patches_dir / "level_patch.py").write_text(level_patch)
    (patches_dir / "player_patch.py").write_text(player_patch)
    (patches_dir / "dialogue_patch.py").write_text(dialogue_patch)
    
    print(f"✅ Created integration patches: {patches_dir}")

def create_integration_guide(npc_info):
    """Create step-by-step integration guide"""
    guide_content = f"""# {npc_info["name"]} Integration Guide

## 📋 Quick Integration Steps

### Step 1: Copy Files
Copy the generated NPC files to your game directory:
```bash
# Copy character file to main directory
cp npcs/{npc_info["file_name"]}/{npc_info["file_name"]}_character.py .

# Copy menu file (if applicable)
{"cp npcs/" + npc_info["file_name"] + "/" + npc_info["file_name"] + "_menu.py ." if npc_info["interaction_type"] == "menu" else "# No menu file for this NPC type"}
```

### Step 2: Update level.py

**Add imports at the top:**
```python
from {npc_info["file_name"]}_character import {npc_info["class_name"]}
{"from " + npc_info["file_name"] + "_menu import " + npc_info["class_name"] + "Menu" if npc_info["interaction_type"] == "menu" else ""}
```

**Add to Level.__init__ method:**
```python
{"self." + npc_info["file_name"] + "_menu = " + npc_info["class_name"] + "Menu(self.player)" if npc_info["interaction_type"] == "menu" else "# No menu initialization needed"}
{"self." + npc_info["file_name"] + "_active = False" if npc_info["interaction_type"] == "menu" else ""}
```

**Add to Level.setup() method (after ground tile creation):**
```python
# {npc_info["name"]} NPC
{npc_info["file_name"]}_pos = {npc_info["position"]}
Interaction(
    {npc_info["file_name"]}_pos,
    (64, 64),
    self.interaction_sprites,
    "{npc_info["class_name"]}"
)

self.{npc_info["file_name"]}_npc = {npc_info["class_name"]}(
    {npc_info["file_name"]}_pos,
    self.all_sprites
)
```

**Add these methods to Level class:**
```python
def toggle_{npc_info["file_name"]}(self):
    \"\"\"Start {npc_info["name"]} interaction\"\"\"
    recent_emotions = list(self.emotions_deque) if self.emotions_deque else ["neutral"]
    current_emotion = recent_emotions[0] if recent_emotions else "neutral"
    
    player_context = {{
        "npc_name": "{npc_info["name"]}",
        "npc_role": "{npc_info["role"]}",
        "situation": "player wants to interact with {npc_info["name"]}",
        "emotion": current_emotion,
        "player_money": self.player.money,
    }}
    
    self.dialogue_system.start_dialogue(
        "{npc_info["file_name"]}",
        player_context=player_context,
        on_finish=self.open_{npc_info["file_name"]}_menu
    )

{"def open_" + npc_info["file_name"] + "_menu(self):" if npc_info["interaction_type"] == "menu" else ""}
{"    \"\"\"Open the " + npc_info["name"] + " Menu\"\"\"" if npc_info["interaction_type"] == "menu" else ""}
{"    self." + npc_info["file_name"] + "_active = True" if npc_info["interaction_type"] == "menu" else ""}
{"    self." + npc_info["file_name"] + "_menu = " + npc_info["class_name"] + "Menu(self.player)" if npc_info["interaction_type"] == "menu" else ""}
```

**Add to Level.run() method (in the main game loop):**
```python
{"# Handle " + npc_info["name"] + " menu" if npc_info["interaction_type"] == "menu" else ""}
{"if self." + npc_info["file_name"] + "_active:" if npc_info["interaction_type"] == "menu" else ""}
{"    self." + npc_info["file_name"] + "_active = self." + npc_info["file_name"] + "_menu.update()" if npc_info["interaction_type"] == "menu" else ""}
```

**Update Player creation (find where Player is created and modify):**
```python
self.player = Player(
    pos=(obj.x, obj.y),
    group=self.all_sprites,
    collision_sprites=self.collision_sprites,
    tree_sprites=self.tree_sprites,
    interaction=self.interaction_sprites,
    soil_layer=self.soil_layer,
    toggle_shop=self.toggle_shop,
    toggle_blacksmith=self.toggle_blacksmith,
    toggle_{npc_info["file_name"]}=self.toggle_{npc_info["file_name"]},  # Add this line
)
```

### Step 3: Update player.py

**Update Player.__init__ method signature:**
```python
def __init__(self, pos, group, collision_sprites, tree_sprites, interaction, soil_layer, toggle_shop, toggle_blacksmith=None, toggle_{npc_info["file_name"]}=None):
    # ... existing code ...
    self.toggle_{npc_info["file_name"]} = toggle_{npc_info["file_name"]}
```

**Update interaction handling (find existing collision code and add):**
```python
if collided_interaction_sprite:
    if collided_interaction_sprite[0].name == "Trader":
        self.toggle_shop()
    elif collided_interaction_sprite[0].name == "Blacksmith":
        if self.toggle_blacksmith:
            self.toggle_blacksmith()
    elif collided_interaction_sprite[0].name == "{npc_info["class_name"]}":  # Add this
        if self.toggle_{npc_info["file_name"]}:
            self.toggle_{npc_info["file_name"]}()
    else:
        self.status = "left_idle"
        self.sleep = True
```

### Step 4: Update dialogue_system.py

**Add to _get_static_fallback method:**
```python
def _get_static_fallback(self, character_id: str) -> str:
    fallbacks = {{
        "trader": "Welcome, friend! I have many fine goods for a hardworking farmer like you. Let's see what you need.",
        "blacksmith": "Greetings, farmer! I can forge better tools for your farm work. Bring me some metal and I'll craft you something special!",
        "{npc_info["file_name"]}": "{npc_info["dialogue"]}"  # Add this line
    }}
    return fallbacks.get(character_id, "Hello there! Nice day for farming.")
```

### Step 5: Test Your NPC

1. Run the game: `python main.py`
2. Walk to position {npc_info["position"]} on the map
3. You should see your NPC (colored rectangle)
4. Press Enter near it to trigger interaction
5. {"Check that the menu appears after dialogue" if npc_info["interaction_type"] == "menu" else "Check that dialogue appears"}

### Step 6: Customize (Optional)

1. **Add custom sprites**: Place 32x48 pixel PNG files in `npcs/{npc_info["file_name"]}/sprites/idle/`
2. **Modify colors**: Edit the `self.image.fill()` line in the character file
3. **Update dialogue**: Change the dialogue in the character file or dialogue system
4. **Add more options**: {"Modify the menu options in the menu file" if npc_info["interaction_type"] == "menu" else "Add more interaction types to the character"}

## 🎨 Customization Tips

### Visual Appearance
- Change NPC color by modifying `self.image.fill((R, G, B))` in the character file
- Add custom sprites by placing them in the sprites/idle/ directory
- NPCs should be 32x48 pixels to match the game style

### Functionality
- {"Modify menu options and prices in the menu file" if npc_info["interaction_type"] == "menu" else "Add more dialogue options in the character file"}
- Update the dialogue system with more context-aware responses
- Add seasonal or time-based behavior changes

### Advanced Features
- Add walking animations by creating more sprite directories
- Implement quest systems with progress tracking
- Create relationship systems with friendship levels

## 🐛 Troubleshooting

### Common Issues
1. **NPC doesn't appear**: Check that position {npc_info["position"]} is valid on your map
2. **Interaction doesn't work**: Verify the interaction area collision detection
3. **Menu doesn't open**: {"Ensure the menu file is imported and initialized correctly" if npc_info["interaction_type"] == "menu" else "Check dialogue system integration"}
4. **Import errors**: Make sure all files are in the correct locations

### Debug Tips
1. Add print statements to verify NPC creation
2. Check console for error messages
3. Test interaction area by walking around the NPC
4. Verify all required methods are implemented

---

**🎉 Your {npc_info["name"]} is ready to add to the game!** Follow the steps above to integrate your new NPC into PyDew Valley.
"""
    
    guide_file = Path(f"integration_guide_{npc_info['file_name']}.md")
    guide_file.write_text(guide_content)
    print(f"✅ Created integration guide: {guide_file}")

if __name__ == "__main__":
    if not Path("level.py").exists():
        print("❌ Error: Run this script from the PyDew Valley game directory!")
        print("Make sure you can see files like level.py, player.py, etc.")
        sys.exit(1)
    
    main()
